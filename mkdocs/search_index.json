{
    "docs": [
        {
            "location": "/", 
            "text": "VLSCI GenomeSpace\n\n\n\n\nMadison Flannery | 2017", 
            "title": "Home"
        }, 
        {
            "location": "/#vlsci-genomespace", 
            "text": "Madison Flannery | 2017", 
            "title": "VLSCI GenomeSpace"
        }, 
        {
            "location": "/build_gs_1.0/", 
            "text": "Building v1.0 of GenomeSpace\n\n\nTo build Version 1.0 (SimpleDB/Virgo) of GenomeSpace:\n\n\nsudo su\ncd /mnt/genomespace/SRC/combined\nmvn clean install -PdeployLocal -Dmaven.test.skip=true -DskipTests\n\n\n\n\nTo start the server\n\n\ncd /mnt/genomespace/DEVDEPLOY/virgo/bin\n./startup.sh", 
            "title": "Version 1.0"
        }, 
        {
            "location": "/build_gs_1.0/#building-v10-of-genomespace", 
            "text": "To build Version 1.0 (SimpleDB/Virgo) of GenomeSpace:  sudo su\ncd /mnt/genomespace/SRC/combined\nmvn clean install -PdeployLocal -Dmaven.test.skip=true -DskipTests  To start the server  cd /mnt/genomespace/DEVDEPLOY/virgo/bin\n./startup.sh", 
            "title": "Building v1.0 of GenomeSpace"
        }, 
        {
            "location": "/build_gs_2.0/", 
            "text": "Building v2.0 of GenomeSpace\n\n\nBuilding for the first time?\n\n\nEnsure you have started the cache:\n\n\ncd ~/genomespace/activeMQ/apache-activemq-5.9.0/bin/\nnohup ./activemq console \n\n\n\n\n\nFor the database machine- Ensure you have edited \n/etc/mongod.conf\n file to add the IP of the DB machine:\n\n\ncomma bind_ip = 127.0.0.1,\nGENOMESPACE_DB_MACHINE_IP\n\n\n\n\n\nAdd the DB machine IP into the genomespace env-dev.properties file. More info on this file is below.\n\n\nBuilding GS\n\n\nNOTE: There is a script called 'build' inside SRC/combined that automates this process.\n\n\nTo build Version 2.0 (MongoDB/Tomcat7) of GenomeSpace:\n\n\nsudo su\ncd /home/ubuntu/genomespace/SRC/combined\nmvn -X clean install  -am -DskipTests -Denv-properties-file=/home/ubuntu/genomespace/env-dev.properties -P deployToLocalTomcat -Dmaven.test.skip=true\n\n\n\n\nEnsure you have a env-dev.properties file in the home directory, which contains the URL's and credentials required for GenomeSpace. See \nthis example\n\n\nTo start the server\n\n\nsudo service tomcat7 restart\n\n\n\n\nCaching issues\n\n\nNOTE: There is a script called 'build' inside SRC/combined that automates this process.\n\n\nIf you experience tomcat/maven caching issues (i.e. your changes aren't being reflected after a build/restart):\n\n\nrm -r /var/lib/tomcat7/webapps/datamanager*\nrm -r /var/lib/tomcat7/webapps/atm*\nrm -r /var/lib/tomcat7/webapps/identityServer*\nrm -r /var/lib/tomcat7/webapps/jsui*\n\n\n\n\nThen re-build the code and restart the server.", 
            "title": "Version 2.0"
        }, 
        {
            "location": "/build_gs_2.0/#building-v20-of-genomespace", 
            "text": "", 
            "title": "Building v2.0 of GenomeSpace"
        }, 
        {
            "location": "/build_gs_2.0/#building-for-the-first-time", 
            "text": "Ensure you have started the cache:  cd ~/genomespace/activeMQ/apache-activemq-5.9.0/bin/\nnohup ./activemq console    For the database machine- Ensure you have edited  /etc/mongod.conf  file to add the IP of the DB machine:  comma bind_ip = 127.0.0.1, GENOMESPACE_DB_MACHINE_IP   Add the DB machine IP into the genomespace env-dev.properties file. More info on this file is below.", 
            "title": "Building for the first time?"
        }, 
        {
            "location": "/build_gs_2.0/#building-gs", 
            "text": "NOTE: There is a script called 'build' inside SRC/combined that automates this process.  To build Version 2.0 (MongoDB/Tomcat7) of GenomeSpace:  sudo su\ncd /home/ubuntu/genomespace/SRC/combined\nmvn -X clean install  -am -DskipTests -Denv-properties-file=/home/ubuntu/genomespace/env-dev.properties -P deployToLocalTomcat -Dmaven.test.skip=true  Ensure you have a env-dev.properties file in the home directory, which contains the URL's and credentials required for GenomeSpace. See  this example  To start the server  sudo service tomcat7 restart", 
            "title": "Building GS"
        }, 
        {
            "location": "/build_gs_2.0/#caching-issues", 
            "text": "NOTE: There is a script called 'build' inside SRC/combined that automates this process.  If you experience tomcat/maven caching issues (i.e. your changes aren't being reflected after a build/restart):  rm -r /var/lib/tomcat7/webapps/datamanager*\nrm -r /var/lib/tomcat7/webapps/atm*\nrm -r /var/lib/tomcat7/webapps/identityServer*\nrm -r /var/lib/tomcat7/webapps/jsui*  Then re-build the code and restart the server.", 
            "title": "Caching issues"
        }, 
        {
            "location": "/design_overview/", 
            "text": "GenomeSpace Design Overview\n\n\nGenomeSpace is made up of the following main components:\n- Analysis and Tool Manager (ATM) - Handles everything tool related.\n- Data Manager - Handles everything data related.\n- Identity Server \n Manager - Handles everything user related.\n- JSUI - The user interface. Mostly the standard vanilla javascript, html, css, but with a bit of AngularJS.\n- The database - Stores all info re: tools, connected data sources, public data, user info, etc.\n- Client Development Kit - a way for developers to interact with GS without the UI. It's a jar file.", 
            "title": "Overview"
        }, 
        {
            "location": "/design_overview/#genomespace-design-overview", 
            "text": "GenomeSpace is made up of the following main components:\n- Analysis and Tool Manager (ATM) - Handles everything tool related.\n- Data Manager - Handles everything data related.\n- Identity Server   Manager - Handles everything user related.\n- JSUI - The user interface. Mostly the standard vanilla javascript, html, css, but with a bit of AngularJS.\n- The database - Stores all info re: tools, connected data sources, public data, user info, etc.\n- Client Development Kit - a way for developers to interact with GS without the UI. It's a jar file.", 
            "title": "GenomeSpace Design Overview"
        }, 
        {
            "location": "/design_jsui/", 
            "text": "JavaScript User Interface\n\n\n\n\nThe JS/HTML/CSS is under src -\n main -\n webapp.\n\n\nThis is by far the easiest part of GS.\n\n\nAll the folders should be pretty self-explanatory.\n\n\nThe menu's are built dynamically using javascript (menu.js).\n\n\nUploads are done client-side (javascript).\n\n\nThe easiest way to debug issues in JSUI is by copying text from the part of the interface and searching for it.", 
            "title": "JSUI"
        }, 
        {
            "location": "/design_jsui/#javascript-user-interface", 
            "text": "The JS/HTML/CSS is under src -  main -  webapp.  This is by far the easiest part of GS.  All the folders should be pretty self-explanatory.  The menu's are built dynamically using javascript (menu.js).  Uploads are done client-side (javascript).  The easiest way to debug issues in JSUI is by copying text from the part of the interface and searching for it.", 
            "title": "JavaScript User Interface"
        }, 
        {
            "location": "/design_idserver/", 
            "text": "Identity Server and Manager\n\n\n\n\nThis deals with all things user-related.\n\n\n\n\nIdentityManager\n\n\n\n\nThis module contains the 'managers' for 3 main things:\n\n\nUsers - username, password, etc.\n\n\nUserProfile - this includes things like what tools a user has on their custom toolbars, any other custom settings.\n\n\nGroups - being able to share things with a group of other users. What groups a user manages, what groups they're a member of, etc.\n\n\n\n\n\n\n\n\nIdentityServer\n\n\n\n\n\n\nUnder 'auth', you'll find 2 folders:\n\n\n\n\n'basic' - this is basic authentication for genomespace- send username, password, it'll give you an auth token.\n\n\n'openid' - this is OpenID based auth. Often tools (e.g. Galaxy) will use this type of auth to avoid users entering passwords all the time.\n\n\n\n\n\n\n\n\nUnder 'identity' you'll find some stuff for group management and user management.\n\n\n\n\n\n\nidentityserver-messages\n\n\n\n\nInside the 'identityserver-messages' module, you'll find the model for the user related things e.g. User, Groups, etc. This module is a dependency of lots of things, e.g. CDK.\n\n\n\n\nidentityserver-common\n\n\n\n\nInside the 'identityserver-common' module you'll find some user constants.", 
            "title": "Identity Server"
        }, 
        {
            "location": "/design_idserver/#identity-server-and-manager", 
            "text": "This deals with all things user-related.", 
            "title": "Identity Server and Manager"
        }, 
        {
            "location": "/design_idserver/#identitymanager", 
            "text": "This module contains the 'managers' for 3 main things:  Users - username, password, etc.  UserProfile - this includes things like what tools a user has on their custom toolbars, any other custom settings.  Groups - being able to share things with a group of other users. What groups a user manages, what groups they're a member of, etc.", 
            "title": "IdentityManager"
        }, 
        {
            "location": "/design_idserver/#identityserver", 
            "text": "Under 'auth', you'll find 2 folders:   'basic' - this is basic authentication for genomespace- send username, password, it'll give you an auth token.  'openid' - this is OpenID based auth. Often tools (e.g. Galaxy) will use this type of auth to avoid users entering passwords all the time.     Under 'identity' you'll find some stuff for group management and user management.", 
            "title": "IdentityServer"
        }, 
        {
            "location": "/design_idserver/#identityserver-messages", 
            "text": "Inside the 'identityserver-messages' module, you'll find the model for the user related things e.g. User, Groups, etc. This module is a dependency of lots of things, e.g. CDK.", 
            "title": "identityserver-messages"
        }, 
        {
            "location": "/design_idserver/#identityserver-common", 
            "text": "Inside the 'identityserver-common' module you'll find some user constants.", 
            "title": "identityserver-common"
        }, 
        {
            "location": "/design_datamanager/", 
            "text": "Data Manager\n\n\ndm-core\n\n\nDm-core is one of the biggest GS modules... it's messy!\n\n\n\n\nMost (but unfortunately not all...) of the storage specific stuff is under 'storage', and then the respective folder for the storage type you're dealing with.\n\n\nThe rest of the main stuff lives in 'core'\n\n\nThe storage stuff is relatively abstracted out with Interfaces etc, majority of which live in 'core', and any implementation will generally have 'Impl' at the end of the name.\n\n\nDebugging issues with storage: apart from the stack trace, any other issues can generally be solved by starting inside 'resource', finding the corresponding URL segment, and following through the code.\n\n\nLogging can be easily done using the 'swiftlogger' class (can't remember it's exact location... easily searchable though).\n\n\n\n\ndm-messages\n\n\nContains a whole bunch of stuff mosyly used by other modules and the CDK.\n\n\ndm-security\n\n\nContains stuff to do with ACL's (access control).", 
            "title": "Data Manager"
        }, 
        {
            "location": "/design_datamanager/#data-manager", 
            "text": "", 
            "title": "Data Manager"
        }, 
        {
            "location": "/design_datamanager/#dm-core", 
            "text": "Dm-core is one of the biggest GS modules... it's messy!   Most (but unfortunately not all...) of the storage specific stuff is under 'storage', and then the respective folder for the storage type you're dealing with.  The rest of the main stuff lives in 'core'  The storage stuff is relatively abstracted out with Interfaces etc, majority of which live in 'core', and any implementation will generally have 'Impl' at the end of the name.  Debugging issues with storage: apart from the stack trace, any other issues can generally be solved by starting inside 'resource', finding the corresponding URL segment, and following through the code.  Logging can be easily done using the 'swiftlogger' class (can't remember it's exact location... easily searchable though).", 
            "title": "dm-core"
        }, 
        {
            "location": "/design_datamanager/#dm-messages", 
            "text": "Contains a whole bunch of stuff mosyly used by other modules and the CDK.", 
            "title": "dm-messages"
        }, 
        {
            "location": "/design_datamanager/#dm-security", 
            "text": "Contains stuff to do with ACL's (access control).", 
            "title": "dm-security"
        }, 
        {
            "location": "/design_atm/", 
            "text": "Analysis and Tool Manager\n\n\nThis module basically takes care of itself. All tool related things.\n\n\nThe main pieces of code are to do with adding private tools, and dealing with associated data formats. The most common data format related issue is when it complains about not having all of them- they're stored in the database, so no code changes generally required.", 
            "title": "Analysis and Tool Manager"
        }, 
        {
            "location": "/design_atm/#analysis-and-tool-manager", 
            "text": "This module basically takes care of itself. All tool related things.  The main pieces of code are to do with adding private tools, and dealing with associated data formats. The most common data format related issue is when it complains about not having all of them- they're stored in the database, so no code changes generally required.", 
            "title": "Analysis and Tool Manager"
        }, 
        {
            "location": "/design_cdk/", 
            "text": "Client Development Kit\n\n\nDocumentation for this can be found on the Broad's website (genomespace.org).\n\n\nDesign overview similar to GS itself, there's a client for analysis \n tool manager, data manager, group manager, and user manager.\n\n\nThis is used in the sepsis project- we added a swift upload function, and a test script can be found at https://github.com/madiflannery/genomespace_cdk_test", 
            "title": "CDK"
        }, 
        {
            "location": "/design_cdk/#client-development-kit", 
            "text": "Documentation for this can be found on the Broad's website (genomespace.org).  Design overview similar to GS itself, there's a client for analysis   tool manager, data manager, group manager, and user manager.  This is used in the sepsis project- we added a swift upload function, and a test script can be found at https://github.com/madiflannery/genomespace_cdk_test", 
            "title": "Client Development Kit"
        }, 
        {
            "location": "/maintenance_page/", 
            "text": "Maintenance Page\n\n\nThe maintenance page lives at https://github.com/madiflannery/genomespace_maintenance\n\n\nIt is already inside $TOMCAT_HOME/webapps/maintenance\n\n\nTo put into maintenance mode, make the maintenance page the default webapp:\n\n\ncd $TOMCAT_HOME/webapps\nmv ROOT ROOT_TMP\nmv maintenance ROOT\n\n\n\n\nMake sure you also update the GVL Status page, and pause the UptimeRobot monitor.\n\n\nYou can still access GenomeSpace by adding the /jsui to the URL, so you can test before you launch again.\n\n\nTo take out of maintenance mode:\n\n\ncd $TOMCAT_HOME/webapps\nmv ROOT maintenance\nmv ROOT_TMP ROOT", 
            "title": "Maintenance page"
        }, 
        {
            "location": "/maintenance_page/#maintenance-page", 
            "text": "The maintenance page lives at https://github.com/madiflannery/genomespace_maintenance  It is already inside $TOMCAT_HOME/webapps/maintenance  To put into maintenance mode, make the maintenance page the default webapp:  cd $TOMCAT_HOME/webapps\nmv ROOT ROOT_TMP\nmv maintenance ROOT  Make sure you also update the GVL Status page, and pause the UptimeRobot monitor.  You can still access GenomeSpace by adding the /jsui to the URL, so you can test before you launch again.  To take out of maintenance mode:  cd $TOMCAT_HOME/webapps\nmv ROOT maintenance\nmv ROOT_TMP ROOT", 
            "title": "Maintenance Page"
        }, 
        {
            "location": "/ssl_update/", 
            "text": "How to update the SSL Certificate once expired\n\n\nEnsure you have root access to the machine.\n\n\nsudo su\ncd /mnt/genomespace/DEVDEPLOY/virgo/config\n\n\n\n\nRemove all old keys and cert files from the directory.\n\n\nWith the key and certificate in .pem format, do the following steps. You'll need to set a password, for consistency, use the one in the tomcat server.xml file under the SSL connector.\n\n\nopenssl pkcs12 -export -inkey genome-edu-au-2016.key -in genome-edu-au-2016.cer -name tomcat -out keystore.p12\nkeytool -importkeystore -srckeystore keystore.p12 -srcstoretype pkcs12 -destkeystore $JAVA_HOME/jre/lib/security/cacerts\n\n\n\n\nIf it errors because the certificate is already there, delete the existing one:\n\n\nkeytool -delete -alias tomcat -keystore $JAVA_HOME/jre/lib/security/cacerts\n\n\n\n\nFinally, create the keystore file Tomcat will use\n\n\nkeytool -importkeystore -srckeystore keystore.p12 -srcstoretype pkcs12 -deststoretype jks -destkeystore keystore\n\n\n\n\nThen, follow the instructions to \nupdate the genomespace secret key\n, and rebuild the code.", 
            "title": "Updating the SSL Certificate"
        }, 
        {
            "location": "/ssl_update/#how-to-update-the-ssl-certificate-once-expired", 
            "text": "Ensure you have root access to the machine.  sudo su\ncd /mnt/genomespace/DEVDEPLOY/virgo/config  Remove all old keys and cert files from the directory.  With the key and certificate in .pem format, do the following steps. You'll need to set a password, for consistency, use the one in the tomcat server.xml file under the SSL connector.  openssl pkcs12 -export -inkey genome-edu-au-2016.key -in genome-edu-au-2016.cer -name tomcat -out keystore.p12\nkeytool -importkeystore -srckeystore keystore.p12 -srcstoretype pkcs12 -destkeystore $JAVA_HOME/jre/lib/security/cacerts  If it errors because the certificate is already there, delete the existing one:  keytool -delete -alias tomcat -keystore $JAVA_HOME/jre/lib/security/cacerts  Finally, create the keystore file Tomcat will use  keytool -importkeystore -srckeystore keystore.p12 -srcstoretype pkcs12 -deststoretype jks -destkeystore keystore  Then, follow the instructions to  update the genomespace secret key , and rebuild the code.", 
            "title": "How to update the SSL Certificate once expired"
        }, 
        {
            "location": "/update_gs_key/", 
            "text": "How to update the GS secret key\n\n\ncd /home/ubuntu/genomespace/gensecretkey\n./gengssecretkey.sh\nmv genomespace-secret.key ..\ncd ..\ncp genomespace-secret.key /root/genomespace\n\n\n\n\nFinally, re-build the code.", 
            "title": "Updating the GS Key"
        }, 
        {
            "location": "/update_gs_key/#how-to-update-the-gs-secret-key", 
            "text": "cd /home/ubuntu/genomespace/gensecretkey\n./gengssecretkey.sh\nmv genomespace-secret.key ..\ncd ..\ncp genomespace-secret.key /root/genomespace  Finally, re-build the code.", 
            "title": "How to update the GS secret key"
        }, 
        {
            "location": "/cors_config/", 
            "text": "AWS CORS Configuration\n\n\nSee below for the CORS config to add to the default AWS S3 bucket attached to GenomeSpace.\n\n\nCORSConfiguration\n\n    \nCORSRule\n\n        \nAllowedOrigin\nPUT GENOMESPACE URL HERE\n/AllowedOrigin\n\n        \nAllowedMethod\nGET\n/AllowedMethod\n\n        \nAllowedMethod\nPUT\n/AllowedMethod\n\n        \nAllowedMethod\nPOST\n/AllowedMethod\n\n        \nAllowedMethod\nDELETE\n/AllowedMethod\n\n        \nMaxAgeSeconds\n3000\n/MaxAgeSeconds\n\n        \nAllowedHeader\n*\n/AllowedHeader\n\n    \n/CORSRule\n\n\n/CORSConfiguration", 
            "title": "AWS CORS Config"
        }, 
        {
            "location": "/cors_config/#aws-cors-configuration", 
            "text": "See below for the CORS config to add to the default AWS S3 bucket attached to GenomeSpace.  CORSConfiguration \n     CORSRule \n         AllowedOrigin PUT GENOMESPACE URL HERE /AllowedOrigin \n         AllowedMethod GET /AllowedMethod \n         AllowedMethod PUT /AllowedMethod \n         AllowedMethod POST /AllowedMethod \n         AllowedMethod DELETE /AllowedMethod \n         MaxAgeSeconds 3000 /MaxAgeSeconds \n         AllowedHeader * /AllowedHeader \n     /CORSRule  /CORSConfiguration", 
            "title": "AWS CORS Configuration"
        }, 
        {
            "location": "/custom_components/", 
            "text": "GenomeSpace Australia Custom Components\n\n\nThings that were developed at VLSCI:\n\n\n\n\nAll of the OpenStack Swift functionality. I.e. the ability to connect a swift container, upload to it, download from it, get public URL's, and all other file operations. Note that there is no sharing with Swift due to OpenStack's design.\n\n\nThe 'import from URL' functionality.\n\n\n\n\nThings that differ between Broad's GS and GS AU:\n\n\n\n\nWe no longer support Dropbox \n Google Drive. This is because uploads to these storage types actually go via the genomespace s3 bucket and users are not informed of this.\n\n\nA lot of the Broad's external resources e.g. recipes, their user groups, etc are not linked under the 'help' section.\n\n\nThere's an extra step in setting up a private s3 bucket - adding the CORS config.\n\n\nUsers don't have a 'home' folder, i.e., no default storage.\n\n\nThe ability to upload custom tool icons is turned off due to lack of home folder.", 
            "title": "GS-AU Custom Components"
        }, 
        {
            "location": "/custom_components/#genomespace-australia-custom-components", 
            "text": "Things that were developed at VLSCI:   All of the OpenStack Swift functionality. I.e. the ability to connect a swift container, upload to it, download from it, get public URL's, and all other file operations. Note that there is no sharing with Swift due to OpenStack's design.  The 'import from URL' functionality.   Things that differ between Broad's GS and GS AU:   We no longer support Dropbox   Google Drive. This is because uploads to these storage types actually go via the genomespace s3 bucket and users are not informed of this.  A lot of the Broad's external resources e.g. recipes, their user groups, etc are not linked under the 'help' section.  There's an extra step in setting up a private s3 bucket - adding the CORS config.  Users don't have a 'home' folder, i.e., no default storage.  The ability to upload custom tool icons is turned off due to lack of home folder.", 
            "title": "GenomeSpace Australia Custom Components"
        }, 
        {
            "location": "/swift/", 
            "text": "OpenStack Swift\n\n\nThe VLSCI-developed swift functionality is done very similarly to s3.\n\n\nFile upload: SwiftMultipartUploadInfoManager.java\nSmall objects OK in one piece, bigger files are split and done using a multipart upload.\nJSUI will decide if its a multipart upload or not.\nThere'll be a signed URL for the upload to swift.\n\n\nLarge objects are stored as Dynamic Large Objects: Basically a whole bunch of file chunks in a folder, with a manifest describing where the chunks are. When you 'download' the tile, swift will sort the chunks by their name and concatenate them to make 1 file.\n\n\nConnecting a swift container: You need username + password + tenancy + container name. The username+pwd+tenancy combo is stored in RAM, so it's lost when the server is restarted and the password will need to be re-entered. Then all containers in a single tenancy will be re-attached. If you have multiple containers over multiple tenancies, you'll need to re-enter the password multiple times.", 
            "title": "OpenStack Swift"
        }, 
        {
            "location": "/swift/#openstack-swift", 
            "text": "The VLSCI-developed swift functionality is done very similarly to s3.  File upload: SwiftMultipartUploadInfoManager.java\nSmall objects OK in one piece, bigger files are split and done using a multipart upload.\nJSUI will decide if its a multipart upload or not.\nThere'll be a signed URL for the upload to swift.  Large objects are stored as Dynamic Large Objects: Basically a whole bunch of file chunks in a folder, with a manifest describing where the chunks are. When you 'download' the tile, swift will sort the chunks by their name and concatenate them to make 1 file.  Connecting a swift container: You need username + password + tenancy + container name. The username+pwd+tenancy combo is stored in RAM, so it's lost when the server is restarted and the password will need to be re-entered. Then all containers in a single tenancy will be re-attached. If you have multiple containers over multiple tenancies, you'll need to re-enter the password multiple times.", 
            "title": "OpenStack Swift"
        }, 
        {
            "location": "/faq/", 
            "text": "Frequently Asked Questions\n\n\nUpdating the URL - a checklist\n\n\n1. Find \n replace all URL's in the source code (by using find/replace in eclipse)\n2. Open the GenomeSpace env-dev.properties file, and change all the URL's.\n3. Build (using build script in SRC/combined).\n4. Update the config.war file through the Tomcat Manager application.\n\n\n\nThings that commonly go wrong\n\n\n1. Tomcat7 needs restarting. This will solve 99% of GS problems.\n2. The ActiveMQ cache hasn't been started.\n3. The config.war file hasn't been updated.\n4. Something in the GenomeSpace properties file is wrong (e.g. a URL, Database IP)", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#frequently-asked-questions", 
            "text": "", 
            "title": "Frequently Asked Questions"
        }, 
        {
            "location": "/faq/#updating-the-url-a-checklist", 
            "text": "1. Find   replace all URL's in the source code (by using find/replace in eclipse)\n2. Open the GenomeSpace env-dev.properties file, and change all the URL's.\n3. Build (using build script in SRC/combined).\n4. Update the config.war file through the Tomcat Manager application.", 
            "title": "Updating the URL - a checklist"
        }, 
        {
            "location": "/faq/#things-that-commonly-go-wrong", 
            "text": "1. Tomcat7 needs restarting. This will solve 99% of GS problems.\n2. The ActiveMQ cache hasn't been started.\n3. The config.war file hasn't been updated.\n4. Something in the GenomeSpace properties file is wrong (e.g. a URL, Database IP)", 
            "title": "Things that commonly go wrong"
        }
    ]
}